#!/usr/bin/env python3
"""
This script sets up an optimization for the hybridisation problem
"""

import numpy as np
from numpy import array, linspace, zeros, shape, tile, ones, cumsum, diff, \
                  vstack, hstack
from numpy import concatenate as concat
from scipy.optimize import linprog


VALS = array(3 * [1, 0.5] + 3 * [-1, -0.5])
TIMES = linspace(0, 2 * np.pi, 12)
DTIMES = concat(([0], diff(TIMES)))

LENSIG = len(VALS)
AMP = max(np.abs(VALS))
CUT = 0.5


def objective_factory():
    """Factory that builds the energy function and objective function"""
    def energy(power, dtime):
        return cumsum(power*dtime)

    objective = zeros(2*LENSIG + 2)

    return energy, objective


def main():
    """Executed as standalone"""

    # objective
    energy, objective = objective_factory()

    # # init vector
    # peak_init = zeros(shape(VALS))
    # base_init = ones(shape(VALS))
    esingle = max(energy(VALS, DTIMES))
    epeak = 0.3*esingle
    # ebase = esingle - epeak
    # x0 = concat([peak_init, base_init, epeak, ebase])

    # equality constraints
    aeq = tile(np.eye(LENSIG), (1, 2))
    aeq = hstack((aeq, zeros((LENSIG, 2))))
    lowaeq = hstack((zeros((1, 2*LENSIG)), [[1, 1]]))
    aeq = vstack((aeq, lowaeq))
    beq = concat((VALS, [esingle]))

    # inequality constraints
    zmat = zeros([LENSIG, LENSIG])
    zvec = zeros((LENSIG, 1))
    onevec = ones((LENSIG, 1))
    ltmat = np.tril(ones(LENSIG))*(np.dot(DTIMES.reshape(-1, 1), onevec.T))
    aineq = vstack((hstack((-ltmat, zmat, zvec, zvec)),
                    hstack((zmat, -ltmat, zvec, zvec)),
                    hstack((ltmat, zmat, -onevec, zvec)),
                    hstack((zmat, ltmat, zvec, -onevec))))
    bineq = zeros(shape(aineq)[0])

    # bounds
    base_lim = AMP * CUT
    peak_lim = AMP * (1 - CUT)
    ub = concat([tile(peak_lim, LENSIG), tile(base_lim, LENSIG),
                 [esingle, esingle]])
    lb = -ub[:]
    lb[-2] = 0
    lb[-1] = 0
    bnds = tuple(tup for tup in zip(lb, ub))

    return linprog(objective, A_ub=aineq, b_ub=bineq, A_eq=aeq,
                   b_eq=beq, bounds=bnds, method='interior-point')


if __name__ == '__main__':
    res = main()
